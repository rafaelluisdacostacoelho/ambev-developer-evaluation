services:
  ambev.developerevaluation.webapi:
    container_name: ambev_developer_evaluation_webapi
    image: ${DOCKER_REGISTRY-}ambevdeveloperevaluationwebapi
    build:
      context: .
      dockerfile: src/Ambev.DeveloperEvaluation.WebApi/Dockerfile.dev
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - DOTNET_USE_POLLING_FILE_WATCHER=true
      - DOTNET_CLI_UI_LANGUAGE=en
      - LC_ALL=en_US.UTF-8
      - LANG=en_US.UTF-8
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
    ports:
      - "61094:8080"
      - "61095:8081"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - .:/app
    # depends_on:
    #   elasticsearch:
    #     condition: service_healthy
    #   logstash:
    #     condition: service_healthy
    #   kibana:
    #     condition: service_healthy
    #   rabbitmq:
    #     condition: service_healthy

  ambev.developerevaluation.database:
    container_name: ambev_developer_evaluation_database
    image: postgis/postgis:13-3.3
    environment:
      POSTGRES_DB: developer_evaluation
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: ev@luAt10n
    ports:
      - "54322:5432"
    restart: unless-stopped
    volumes:
      - ambev_pg_data:/var/lib/postgresql/data

  ambev.developerevaluation.nosql:
    container_name: ambev_developer_evaluation_nosql 
    image: mongo:8.0
    environment:
        MONGO_INITDB_ROOT_USERNAME: developer
        MONGO_INITDB_ROOT_PASSWORD: ev@luAt10n
    ports:
      - "27017:27017"
    volumes:
      - ambev_mongo_data:/data/db

  ambev.developerevaluation.cache:
    container_name: ambev_developer_evaluation_cache 
    image: redis:7.4.1-alpine
    command: redis-server --requirepass ev@luAt10n
    ports:
       - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - action.destructive_requires_name=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.1
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5673:5672" # Porta personalizada para AMQP
      - "15673:15672" # Porta personalizada para interface de gerenciamento
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  ambev_pg_data:
    external: true
  ambev_mongo_data:
    external: true
  es_data:
    external: true
  rabbitmq_data:
    driver: local
